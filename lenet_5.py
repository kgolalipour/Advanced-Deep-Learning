# -*- coding: utf-8 -*-
"""Lenet_5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/166fTZvW35rq7svB8zwbQFDeXWVrWqRQp
"""

import numpy as np
from keras.datasets import mnist
from keras.models import Model 
from keras.layers import Dense, Conv2D, AveragePooling2D, Input, Activation, Flatten
from keras.utils import to_categorical, plot_model

(x_train, y_train), (x_test, y_test) = mnist.load_data()
image_size = x_train.shape[1]

x_train = x_train.astype('float32')/255
x_test = x_test.astype('float32')/255

x_train = x_train.reshape((-1, image_size, image_size, 1))  #we must send image to CNN , 1 = number of channel for CNN 2D
x_test = x_test.reshape((-1, image_size, image_size, 1))

n_labels = len(np.unique(y_train))

y_train = to_categorical(y_train)
y_test = to_categorical(y_test)

print("x_train ", x_train.shape)
print("x_test ", x_test.shape)
print("y_train ", y_train.shape)
print("y_test ", y_test.shape)
print("image_size ", image_size)

x_train = np.pad(x_train, ((0,0),(2,2),(2,2),(0,0)),'constant')  # (60000,28,28,1) convert to (60000,32,32,1). adding 2 first and 2 end
x_test = np.pad(x_test, ((0,0),(2,2),(2,2),(0,0)),'constant')

print("x_train ", x_train.shape)
print("x_test ", x_test.shape)

kernel_size = 5    # or(5,5) size of kernel(filter)
filters = [6, 16]  # number of kernel(filter)
fc_units = [120, 84]  # fully connected layers(2 last layers)
batch_size = 128
n_epochs = 10

inputs = Input(shape=(32, 32, 1), name='inputs')  # first layer in Lenet-5
x = inputs 
x = Conv2D(filters=filters[0],  # second layer- CNN 2D(since in mnist pictures are 2D)
           kernel_size=kernel_size,  #or(5,5)
           activation='relu',
           name=f'layer_1_conv_1_f_{filters[0]}_k_{kernel_size}_a_relu')(x)
print("conv_1:", x.shape )

x = AveragePooling2D(pool_size=2,  #or(2,2) third layer- AveragePooling 2D(since in mnist pictures are 2D)
                     strides=2,    #or(2,2)
                     name='layer_1_avg_pool_1_p_2_s_2')(x)
print("pool_1:", x.shape )

x = Conv2D(filters=filters[1],
           kernel_size=kernel_size,
           activation='relu',
           name=f'layer_2_conv_2_f_{filters[1]}_k_{kernel_size}_a_relu')(x)
x = AveragePooling2D(pool_size=2,
                     strides=2,
                     name='layer_2_avg_pool_2_p_2_s_2')(x)
print("pool_2:", x.shape )

x = Flatten()(x)  # convert to 1D for using in Dense layers
print("flatten:", x.shape )


# for 3 last layers we use Dense for fully-connected (1D)
x = Dense(units=fc_units[0], activation='relu', name= f'layer_3_fc_1_u_{fc_units[0]}_a_relu')(x)
x = Dense(units=fc_units[1], activation='relu', name= f'layer_4_fc_2_u_{fc_units[1]}_a_relu')(x)
outputs = Dense(units=n_labels , activation='softmax', name= f'layer_5_output_u_{n_labels}')(x)

model = Model(inputs=inputs, outputs=outputs, name='LeNet-5')
model.compile(loss='categorical_crossentropy',
             optimizer='adam',
             metrics=['accuracy'])
model.summary()
plot_model(model=model, to_file='LeNet-5_mnist.png', show_shapes=True)

model.fit(x_train, y_train,
          validation_data=(x_test, y_test),
          epochs=n_epochs,
          batch_size=batch_size)